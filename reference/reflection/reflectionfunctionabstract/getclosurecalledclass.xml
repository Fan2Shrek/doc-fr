<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 348789addeedc32858ec0e29ec44fada391aecb3 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="reflectionfunctionabstract.getclosurecalledclass" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ReflectionFunctionAbstract::getClosureCalledClass</refname>
  <refpurpose>Renvoie la classe correspondant à static:: à l'intérieur d'une fermeture</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ReflectionFunctionAbstract">
   <modifier>public</modifier> <type class="union"><type>ReflectionClass</type><type>null</type></type><methodname>ReflectionFunctionAbstract::getClosureCalledClass</methodname>
   <void/>
  </methodsynopsis>
  <simpara>
   Renvoie la classe en tant que <classname>ReflectionClass</classname> qui
   correspond à <literal>static::</literal> à l'intérieur de la
   <classname>Closure</classname>.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   Renvoie une <classname>ReflectionClass</classname> correspondant à la classe
   représentée par <literal>static::</literal> dans la <classname>Closure</classname>.
   Si la fonction n'est pas une fermeture ou si elle a une portée globale, &null;
   est renvoyé à la place.
  </simpara>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>
    Exemple illustrant la différence entre
    <methodname>ReflectionFunctionAbstract::getClosureCalledClass</methodname>,
    <methodname>ReflectionFunctionAbstract::getClosureScopeClass</methodname>,
    et <methodname>ReflectionFunctionAbstract::getClosureThis</methodname>
    avec une méthode d'instance
   </title>
   <programlisting role="php">
<![CDATA[
<?php

class A {
    public function getClosure() {
        var_dump(self::class, static::class);
        return function () {

        };
    }
}

class B extends A {

}

$b = new B();
$c = $b->getClosure();
$r = new ReflectionFunction($c);
var_dump($r->getClosureThis()); // $this === $b
var_dump($r->getClosureScopeClass()); // self::class
var_dump($r->getClosureCalledClass()); // static::class

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(1) "A"
string(1) "B"
object(B)#1 (0) {
}
object(ReflectionClass)#4 (1) {
  ["name"]=>
  string(1) "A"
}
object(ReflectionClass)#4 (1) {
  ["name"]=>
  string(1) "B"
}
]]>
   </screen>
  </example>
  <example>
   <title>
    Exemple illustrant la différence entre
    <methodname>ReflectionFunctionAbstract::getClosureCalledClass</methodname>,
    <methodname>ReflectionFunctionAbstract::getClosureScopeClass</methodname>,
    et <methodname>ReflectionFunctionAbstract::getClosureThis</methodname>
    avec une méthode statique
   </title>
   <programlisting role="php">
    <![CDATA[
<?php

class A {
    public function getClosure() {
        var_dump(self::class, static::class);
        return static function () {

        };
    }
}

class B extends A {

}

$b = new B();
$c = $b->getClosure();
$r = new ReflectionFunction($c);
var_dump($r->getClosureThis()); // NULL
var_dump($r->getClosureScopeClass()); // self::class
var_dump($r->getClosureCalledClass()); // static::class

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(1) "A"
string(1) "B"
NULL
object(ReflectionClass)#4 (1) {
  ["name"]=>
  string(1) "A"
}
object(ReflectionClass)#4 (1) {
  ["name"]=>
  string(1) "B"
}

]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>ReflectionFunctionAbstract::getClosureScopeClass</methodname></member>
   <member><methodname>ReflectionFunctionAbstract::getClosureThis</methodname></member>
   <member><xref linkend="language.oop5.late-static-bindings" /></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
