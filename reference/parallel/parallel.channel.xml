<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<reference xml:id="class.parallel-channel" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La classe parallel\Channel</title>
 <titleabbrev>parallel\Channel</titleabbrev>

 <partintro>
  <section>
    <title>canaux non tamponnés</title>
    <para>
     Un canal non tamponné bloquera les appels à <methodname>parallel\Channel::send</methodname> jusqu'à ce qu'il y ait un récepteur, et bloquera les appels à
     <methodname>parallel\Channel::recv</methodname> jusqu'à ce qu'il y ait un émetteur. Cela signifie qu'un canal non tamponné n'est pas seulement un moyen de partager des données entre les tâches
     mais aussi une méthode simple de synchronisation.
    </para>
    <para>
     Un canal non tamponné est le moyen le plus rapide de partager des données entre les tâches, nécessitant le moins de copie.
    </para>
  </section>

  <section>
    <title>canaux tamponnés</title>
    <para>
     Un canal tamponné ne bloquera pas les appels à <methodname>parallel\Channel::send</methodname> jusqu'à ce que la capacité soit atteinte, les appels à
     <methodname>parallel\Channel::recv</methodname> bloqueront jusqu'à ce qu'il y ait des données dans le tampon.
    </para>
  </section>

  <section>
    <title>Fermetures sur les canaux</title>
    <para>
     Une fonctionnalité puissante des canaux parallèles est qu'elles permettent l'échange de fermetures entre les tâches (et les runtimes).
    </para>
    <para>
     Lorsqu'une fermeture est envoyée sur un canal, la fermeture est tamponnée, cela ne change pas le tampon du canal transmettant la fermeture,
     mais cela affecte la portée statique à l'intérieur de la fermeture: la même fermeture envoyée à différentes exécutions, ou à la même exécution,
     ne partagera pas leur portée statique.
    </para>
    <para>
     Cela signifie que chaque fois qu'une fermeture est exécutée qui a été transmise par un canal, l'état statique sera tel qu'il était lorsque la fermeture a été tamponnée.
    </para>
  </section>

  <section>
   <title>canaux anonymes</title>
   <para>
    La construction de canaux anonymes permet au développeur d'éviter d'attribuer des noms à chaque canal: parallel générera un nom unique pour les canaux anonymes.
   </para>
  </section>

  <section xml:id="parallel-channel.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>parallel\Channel</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>parallel\Channel</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">Constructeur anonymes</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='anonymous']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Accès</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='access']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Partage</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='sharing']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Fermer</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='close']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Constantes pour le tamponnement infini</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <varname>Infinite</varname>
    </fieldsynopsis>

   </classsynopsis>
<!-- }}} -->

  </section>

 </partintro>

 &reference.parallel.parallel.channel.construct;
 &reference.parallel.parallel.channel.make;
 &reference.parallel.parallel.channel.open;
 &reference.parallel.parallel.channel.recv;
 &reference.parallel.parallel.channel.send;
 &reference.parallel.parallel.channel.close;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
