<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<reference xml:id="class.parallel-runtime" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La classe parallel\Runtime</title>
 <titleabbrev>parallel\Runtime</titleabbrev>

 <partintro>

  <section>
    <title>Objets d'exécution</title>
    <para>
     Chaque exécution représente un seul thread PHP, le thread est créé (et initialisé) lors de la construction.
     Le thread attend ensuite que des tâches soient planifiées : les tâches planifiées seront exécutées FIFO puis le thread reprendra
     l'attente jusqu'à ce que d'autres tâches soient planifiées, ou qu'il soit fermé, tué ou détruit par les règles de portée normales des objets PHP.
    </para>
    <warning>
     <para>
      Lorsque qu'une exécution est détruite par les règles de portée normales des objets PHP, elle exécutera d'abord toutes les tâches qui ont été planifiées,
      et bloquera pendant ce temps.
     </para>
    </warning>
  </section>

  <section>
    <title>Amorçage d'exécution</title>
    <para>
     Lorsqu'une nouvelle exécution est créée, elle ne partage pas de code avec le thread (ou le processus) qui l'a créée. Cela signifie qu'elle n'a pas les mêmes
     classes et fonctions chargées, ni le même chargeur automatique défini. Dans certains cas, une exécution très légère est souhaitable car les tâches qui
     seront planifiées n'ont pas besoin d'accéder au code du thread parent. Dans les cas où les tâches ont besoin d'accéder au même code, il suffit de définir
     un chargeur automatique comme amorçage.
    </para>
    <note>
     <para>
      Le préchargement peut être utilisé en conjonction avec parallel, dans ce cas le code préchargé est disponible sans amorçage
     </para>
    </note>
  </section>

  <section xml:id="parallel-runtime.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>parallel\Runtime</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>parallel\Runtime</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">Créer</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-runtime')/db:refentry/db:refsect1[@audience='create']/descendant::db:constructorsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Exécuter</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-runtime')/db:refentry/db:refsect1[@audience='execute']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Joindre</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-runtime')/db:refentry/db:refsect1[@audience='join']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

 </partintro>

 &reference.parallel.parallel.runtime.construct;
 &reference.parallel.parallel.runtime.run;
 &reference.parallel.parallel.runtime.close;
 &reference.parallel.parallel.runtime.kill;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
