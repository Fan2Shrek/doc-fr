<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1976eae0d815797af97a1e16c5cd90ffc2868395 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="intlchar.getpropertyenum" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>IntlChar::getPropertyEnum</refname>
  <refpurpose>Renvoie la valeur de la constante de propriété pour un nom de propriété donné</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="IntlChar">
   <modifier>public</modifier> <modifier>static</modifier> <type>int</type><methodname>IntlChar::getPropertyEnum</methodname>
   <methodparam><type>string</type><parameter>alias</parameter></methodparam>
  </methodsynopsis>
  <para>
   Renvoie la valeur de la constante de propriété pour un nom de propriété donné, tel que spécifié dans le fichier de base de données Unicode PropertyAliases.txt.
   Les variantes courtes, longues et autres sont reconnues.
  </para>
  <para>
   De plus, cette fonction mappe les noms synthétiques "gcm" / "General_Category_Mask" à la propriété
   <constant>IntlChar::PROPERTY_GENERAL_CATEGORY_MASK</constant>. Ces noms ne sont pas dans PropertyAliases.txt.
  </para>
  <para>
   Cette fonction complète <function>IntlChar::getPropertyName</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>alias</parameter></term>
    <listitem>
     <para>
      Le nom de la propriété à rechercher. Le nom est comparé en utilisant une "correspondance lâche" comme décrit dans PropertyAliases.txt.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Renvoie une valeur de constante <literal>IntlChar::PROPERTY_</literal>,
   ou <constant>IntlChar::PROPERTY_INVALID_CODE</constant> si le nom donné ne correspond à aucune propriété.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>&intl.property.example;</title>
   <programlisting role="php">
    <![CDATA[
<?php
var_dump(IntlChar::getPropertyEnum('Bidi_Class') === IntlChar::PROPERTY_BIDI_CLASS);
var_dump(IntlChar::getPropertyEnum('script') === IntlChar::PROPERTY_SCRIPT);
var_dump(IntlChar::getPropertyEnum('IDEOGRAPHIC') === IntlChar::PROPERTY_IDEOGRAPHIC);
var_dump(IntlChar::getPropertyEnum('Some made-up string') === IntlChar::PROPERTY_INVALID_CODE);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
bool(true)
bool(true)
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>IntlChar::getPropertyName</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
