<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 02b075821852f44e97742ba6f586cc2fa3272806 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="pdo-pgsql.escapeidentifier" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Pdo\Pgsql::escapeIdentifier</refname>
  <refpurpose>Echappe une chaîne pour son utilisation en tant qu'identifiant SQL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Pdo\\Pgsql">
   <modifier>public</modifier> <type>string</type><methodname>Pdo\Pgsql::escapeIdentifier</methodname>
   <methodparam><type>string</type><parameter>input</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   Echappe une chaîne pour son utilisation en tant qu'identifiant SQL, tel qu'une table, une colonne ou un nom de fonction.
   Ceci est utile lorsque l'identifiant fourni par l'utilisateur pourrait contenir des caractères spéciaux
   qui ne seraient pas interprétés comme faisant partie de l'identifiant par l'analyseur SQL,
   ou lorsque l'identifiant pourrait contenir des caractères en majuscules dont la casse devrait être préservée.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>input</parameter></term>
    <listitem>
     <simpara>
      Une <type>string</type> contenant le texte à échapper.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   Une <type>string</type> contenant les données échappées.
  </simpara>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="pdo-pgsql.escapeidentifier.example.basic">
   <title>Exemple de <methodname>Pdo\Pgsql::escapeIdentifier</methodname></title>
   <programlisting role="php">
<![CDATA[
<?php
$pdo = new Pdo\Pgsql('pgsql:dbname=test host=localhost', $user, $pass);

$unescapedTableName = 'UnescapedTableName';
$pdo->exec("CREATE TABLE $unescapedTableName ()");

$escapedTableName = $pdo->escapeIdentifier('EscapedTableName');
$pdo->exec("CREATE TABLE $escapedTableName ()");

$statement = $pdo->query(
  "SELECT relname FROM pg_stat_user_tables WHERE relname ilike '%tablename'"
);

var_export($statement->fetchAll(PDO::FETCH_COLUMN, 0));

$tableNameWithSymbols = 'Table-Name-With-Symbols';
$pdo->exec("CREATE TABLE $tableNameWithSymbols ()");
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array (
  0 => 'unescapedtablename',
  1 => 'EscapedTableName',
)
Fatal error: Uncaught PDOException: SQLSTATE[42601]: Syntax error: 7 ERROR:  syntax error at or near "Table"
LINE 1: CREATE TABLE Table-Name-With-Symbols ()
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>PDO::quote</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
