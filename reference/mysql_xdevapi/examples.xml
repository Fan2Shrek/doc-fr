<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 8deee9585d9c8485493e35bcb7dde61b29c30854 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<chapter xml:id="mysql-xdevapi.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <para>
  Le point d'entrée central de l'API X est la fonction <function>mysql_xdevapi\getSession</function>,
  qui reçoit une URI vers un serveur MySQL 8.0 et renvoie un objet
  <classname>mysql_xdevapi\Session</classname>.
 </para>
 <example>
  <title>Connecting to a MySQL Server</title>
  <programlisting role="php">
<![CDATA[
<?php
try {
    $session = mysql_xdevapi\getSession("mysqlx://user:password@host");
} catch(Exception $e) {
    die("Connection could not be established: " . $e->getMessage());
}

// ... use $session
?>
]]>
  </programlisting>
 </example>
 <para>
  La session fournit un accès complet à l'API. Pour une nouvelle installation de serveur MySQL,
  la première étape consiste à créer un schéma de base de données avec une collection
  pour stocker des données :
 </para>
 <example>
  <title>Creating a Schema and Collection on the MySQL Server</title>
  <programlisting role="php">
<![CDATA[
<?php
$schema = $session->createSchema("test");
$collection = $schema->createCollection("example");
?>
]]>
  </programlisting>
 </example>
 <para>
  Lorsque vous stockez des données, généralement <function>json_encode</function> est utilisé pour encoder
  les données en JSON, qui peuvent ensuite être stockées dans une collection.
 </para>
 <para>
  Les exemples suivants stockent des données dans la collection que nous avons créée précédemment,
  puis récupèrent à nouveau des parties de ces données.
 </para>
 <example>
  <title>Stocker et Récupérer des Données</title>
  <programlisting role="php">
<![CDATA[
<?php
$marco = [
  "name" => "Marco",
  "age"  => 19,
  "job"  => "Programmer"
];
$mike = [
  "name" => "Mike",
  "age"  => 39,
  "job"  => "Manager"
];

$schema = $session->getSchema("test");
$collection = $schema->getCollection("example");

$collection->add($marco, $mike)->execute();

var_dump($collection->find("name = 'Mike'")->execute()->fetchOne());
?>
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
   <![CDATA[
array(4) {
  ["_id"]=>
  string(28) "00005ad66aaf0000000000000003"
  ["age"]=>
  int(39)
  ["job"]=>
  string(7) "Manager"
  ["name"]=>
  string(4) "Mike"
}
]]>
  </screen>
 </example>
 <para>
  Cet exemple démontre que le serveur MySQL ajoute un champ supplémentaire nommé
  <code>_id</code>, qui sert de clé primaire au document.
 </para>
 <para>
  Cet exemple démontre également que les données récupérées sont triées par ordre alphabétique.
  Cet ordre spécifique provient du stockage binaire efficace à l'intérieur du serveur MySQL, mais
  il ne faut pas s'y fier. Référez-vous à la documentation du type de données JSON de MySQL pour plus de détails.
 </para>
 <para>
  Optionnellement, utilisez les itérateurs de PHP pour récupérer plusieurs documents :
 </para>
 <example>
  <title>Récupérer et Itérer sur Plusieurs Documents</title>
  <programlisting role="php">
<![CDATA[
<?php
$result = $collection->find()->execute();
foreach ($result as $doc) {
  echo "{$doc["name"]} is a {$doc["job"]}.\n";
}
?>
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
   <![CDATA[
Marco is a Programmer.
Mike is a Manager.
]]>
  </screen>
 </example>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
