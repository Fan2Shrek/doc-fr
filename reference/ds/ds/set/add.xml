<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9e0f03ac354d797d1d16c0fcc1663e5e170f2727 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="ds-set.add" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Ds\Set::add</refname>
  <refpurpose>Ajoute des valeurs à la séquence</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>Ds\Set::add</methodname>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
  </methodsynopsis>
  <para>
    Ajoute toutes les valeurs données à l'ensemble qui n'ont pas déjà été ajoutées.
  </para>
  <note>
    <para>
        Les valeurs de type <type>object</type> sont supportées.

        Si un objet implémente <classname>Ds\Hashable</classname>,
        l'égalité sera déterminée par la fonction <code>equals</code> de l'objet.

        Si un objet n'implémente pas <classname>Ds\Hashable</classname>,
        les objets doivent être des références à la même instance pour être considérés comme égaux.
    </para>
  </note>
  <caution>
    <para>
        Toutes les comparaisons sont strictes (type et valeur).
    </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>values</parameter></term>
    <listitem>
     <para>
        Les valeurs à ajouter à la séquence.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
    &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple de <function>Ds\Set::add</function> utilisant les entiers</title>
   <programlisting role="php">
<![CDATA[
<?php
$set = new \Ds\Set();

$set->add(1);
$set->add(1);
$set->add(2);
$set->add(3);

// Les comparaisons strictes ne traiteraient pas ces valeurs de la même manière que int(1)
$set->add("1");
$set->add(true);

var_dump($set);
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
object(Ds\Set)#1 (5) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  string(1) "1"
  [4]=>
  bool(true)
}
]]>
   </screen>
  </example>
  <example>
   <title>Exemple de <function>Ds\Set::add</function> utilisant les objets</title>
   <programlisting role="php">
<![CDATA[
<?php
class HashableObject implements \Ds\Hashable
{
    /**
     * Une valeur arbitraire à utiliser comme valeur de hachage. Ne définit pas l'égalité.
     */
    private $value;

    public function __construct($value)
    {
        $this->value = $value;
    }

    public function hash()
    {
        return $this->value;
    }

    public function equals($obj): bool
    {
        return $this->value === $obj->value;
    }
}

$set = new \Ds\Set();

$obj = new \ArrayIterator([]);

// Ajouter la même instance plusieurs fois n'ajoutera que la première.
$set->add($obj);
$set->add($obj);

// Ajouter plusieurs instances du même objet ajoutera toutes les instances.
$set->add(new \stdClass());
$set->add(new \stdClass());

// Ajouter plusieurs instances d'objets hachables égaux n'ajoutera que la première.
$set->add(new \HashableObject(1));
$set->add(new \HashableObject(1));
$set->add(new \HashableObject(2));
$set->add(new \HashableObject(2));

var_dump($set);
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
object(Ds\Set)#1 (5) {
  [0]=>
  object(ArrayIterator)#2 (1) {
    ["storage":"ArrayIterator":private]=>
    array(0) {
    }
  }
  [1]=>
  object(stdClass)#3 (0) {
  }
  [2]=>
  object(stdClass)#4 (0) {
  }
  [3]=>
  object(HashableObject)#5 (1) {
    ["value":"HashableObject":private]=>
    int(1)
  }
  [4]=>
  object(HashableObject)#6 (1) {
    ["value":"HashableObject":private]=>
    int(2)
  }
}
]]>
   </screen>
  </example>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
