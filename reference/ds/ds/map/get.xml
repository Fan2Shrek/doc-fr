<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 73fae4ee51b644b72028e610abefefced57c18ad Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="ds-map.get" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Ds\Map::get</refname>
  <refpurpose>Renvoie la valeur pour une clé donnée</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>Ds\Map::get</methodname>
   <methodparam><type>mixed</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>default</parameter></methodparam>
  </methodsynopsis>
  <para>
    Renvoie la valeur pour une clé donnée, ou une valeur par défaut optionnelle si la clé
    n'a pas pu être trouvée.
  </para>

  <note>
    <para>
        Les clés de type <type>object</type> sont supportées.

        Si un objet implémente <classname>Ds\Hashable</classname>,
        l'égalité sera déterminée par la fonction <code>equals</code> de l'objet.

        Si un objet n'implémente pas <classname>Ds\Hashable</classname>,
        les objets doivent être des références à la même instance pour être considérés comme égaux.
    </para>
  </note>

  <note>
    <para>
        Vous pouvez également utiliser la syntaxe de tableau pour accéder aux valeurs par clé, par exemple <code>$map["clé"]</code>.
    </para>
  </note>

  <caution>
    <para>
        Attention à l'utilisation de la syntaxe de tableau. Les clés scalaires seront coercées en
        entiers par le moteur. Par exemple, <code>$map["1"]</code> tentera d'accéder à <code>int(1)</code>,
        tandis que <code>$map->get("1")</code> recherchera correctement la clé de chaîne.
    </para>
    <para>
        Voir <link linkend="language.types.array">tableau</link>.
    </para>
  </caution>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>key</parameter></term>
    <listitem>
     <para>
        La clé à rechercher.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>default</parameter></term>
    <listitem>
     <para>
        La valeur par défaut optionnelle, renvoyée si la clé n'a pas pu être trouvée.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
    La valeur mappée à la <parameter>clé</parameter> donnée, ou la <parameter>valeur par défaut</parameter>
    si fournie et que la clé n'a pas pu être trouvée dans la carte.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <classname>OutOfBoundsException</classname> si la clé n'a pas pu être trouvée
   et qu'aucune valeur par défaut n'a été fournie.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple de <function>Ds\Map::get</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$map = new \Ds\Map(["a" => 1, "b" => 2, "c" => 3]);

var_dump($map->get("a"));       // 1
var_dump($map->get("d", 10));   // 10 (utiliser par défaut)
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
int(1)
int(10)
]]>
   </screen>
  </example>
  <example>
   <title>Exemple de <function>Ds\Map::get</function>utilisant la syntaxe de tableau</title>
   <programlisting role="php">
<![CDATA[
<?php
$map = new \Ds\Map(["a" => 1, "b" => 2, "c" => 3]);

var_dump($map["a"]); // 1
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
int(1)
]]>
   </screen>
  </example>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
