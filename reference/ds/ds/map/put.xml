<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: dd07341fae2c414adc1f700be0890ff32e8daab4 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="ds-map.put" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Ds\Map::put</refname>
  <refpurpose>Associe une clé à une valeur</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>Ds\Map::put</methodname>
   <methodparam><type>mixed</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
    Associe une <parameter>clé</parameter> à une <parameter>valeur</parameter>,
    en écrasant une association précédente si elle existe.
  </para>

  <note>
    <para>
        Les clés de type <type>object</type> sont supportées.

        Si un objet implémente <classname>Ds\Hashable</classname>,
        l'égalité sera déterminée par la fonction <code>equals</code> de l'objet.

        Si un objet n'implémente pas <classname>Ds\Hashable</classname>,
        les objets doivent être des références à la même instance pour être considérés comme égaux.
    </para>
  </note>

  <note>
    <para>
        Vous pouvez également utiliser la syntaxe de tableau pour associer des valeurs par clé, par exemple <code>$map["clé"] = $valeur</code>.
    </para>
  </note>

  <caution>
    <para>
        Attention à l'utilisation de la syntaxe de tableau. Les clés scalaires seront coercées en
        entiers par le moteur. Par exemple, <code>$map["1"]</code> tentera d'accéder à
        <code>int(1)</code>, tandis que <code>$map-&gt;get("1")</code>
        recherchera correctement la clé de chaîne.
    </para>
    <para>
        Voir <link linkend="language.types.array">tableaux</link>.
    </para>
  </caution>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>key</parameter></term>
    <listitem>
     <para>
        La clé à associer à la valeur.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>value</parameter></term>
    <listitem>
     <para>
        La valeur à associer à la clé.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
    &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple de <function>Ds\Map::put</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$map = new \Ds\Map();

$map->put("a", 1);
$map->put("b", 2);
$map->put("c", 3);

print_r($map);
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Ds\Map Object
(
    [0] => Ds\Pair Object
        (
            [key] => a
            [value] => 1
        )

    [1] => Ds\Pair Object
        (
            [key] => b
            [value] => 2
        )

    [2] => Ds\Pair Object
        (
            [key] => c
            [value] => 3
        )

)
]]>
   </screen>
  </example>
  <example>
   <title>Exemple de <function>Ds\Map::put</function> utilisant des objets en tant que clé</title>
   <programlisting role="php">
<![CDATA[
<?php
class HashableObject implements \Ds\Hashable
{
    /**
     * Une valeur arbitraire à utiliser comme valeur de hachage. Ne définit pas l'égalité.
     */
    private $value;

    public function __construct($value)
    {
        $this->value = $value;
    }

    public function hash()
    {
        return $this->value;
    }

    public function equals($obj): bool
    {
        return $this->value === $obj->value;
    }
}

$map = new \Ds\Map();

$obj = new \ArrayIterator([]);

// Utiliser la même instance plusieurs fois écrasera la valeur précédente.
$map->put($obj, 1);
$map->put($obj, 2);

// Utiliser plusieurs instances du même objet créera de nouvelles associations.
$map->put(new \stdClass(), 3);
$map->put(new \stdClass(), 4);

// Utiliser plusieurs instances d'objets égaux écrasera les valeurs précédentes.
$map->put(new \HashableObject(1), 5);
$map->put(new \HashableObject(1), 6);
$map->put(new \HashableObject(2), 7);
$map->put(new \HashableObject(2), 8);

var_dump($map);
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
object(Ds\Map)#1 (5) {
  [0]=>
  object(Ds\Pair)#7 (2) {
    ["key"]=>
    object(ArrayIterator)#2 (1) {
      ["storage":"ArrayIterator":private]=>
      array(0) {
      }
    }
    ["value"]=>
    int(2)
  }
  [1]=>
  object(Ds\Pair)#8 (2) {
    ["key"]=>
    object(stdClass)#3 (0) {
    }
    ["value"]=>
    int(3)
  }
  [2]=>
  object(Ds\Pair)#9 (2) {
    ["key"]=>
    object(stdClass)#4 (0) {
    }
    ["value"]=>
    int(4)
  }
  [3]=>
  object(Ds\Pair)#10 (2) {
    ["key"]=>
    object(HashableObject)#5 (1) {
      ["value":"HashableObject":private]=>
      int(1)
    }
    ["value"]=>
    int(6)
  }
  [4]=>
  object(Ds\Pair)#11 (2) {
    ["key"]=>
    object(HashableObject)#6 (1) {
      ["value":"HashableObject":private]=>
      int(2)
    }
    ["value"]=>
    int(8)
  }
}
]]>
   </screen>
  </example>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
