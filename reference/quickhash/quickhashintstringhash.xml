<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<reference xml:id="class.quickhashintstringhash" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La classe QuickHashIntStringHash</title>
 <titleabbrev>QuickHashIntStringHash</titleabbrev>

 <partintro>

<!-- {{{ QuickHashIntStringHash intro -->
  <section xml:id="quickhashintstringhash.intro">
   &reftitle.intro;
   <para>
    Cette classe enveloppe un tableau contenant des nombres entiers, où les
    valeurs sont des chaînes de caractères. Les tableaux sont également
    disponibles en tant qu'implémentation de l'interface <interfacename>ArrayAccess</interfacename>.
   </para>
   <para>
    Les hachages peuvent également être parcourus avec <link linkend="control-structures.foreach"><literal>foreach</literal></link> car l'interface <interfacename>Iterator</interfacename> est
    implémentée. L'ordre dans lequel les éléments sont retournés n'est pas
    garanti.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="quickhashintstringhash.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>QuickHashIntStringHash</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>QuickHashIntStringHash</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="quickhashintstringhash.constants.check-for-dupes">QuickHashIntStringHash::CHECK_FOR_DUPES</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="quickhashintstringhash.constants.do-not-use-zend-alloc">QuickHashIntStringHash::DO_NOT_USE_ZEND_ALLOC</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="quickhashintstringhash.constants.hasher-no-hash">QuickHashIntStringHash::HASHER_NO_HASH</varname>
     <initializer>256</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="quickhashintstringhash.constants.hasher-jenkins1">QuickHashIntStringHash::HASHER_JENKINS1</varname>
     <initializer>512</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="quickhashintstringhash.constants.hasher-jenkins2">QuickHashIntStringHash::HASHER_JENKINS2</varname>
     <initializer>1024</initializer>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.quickhashintstringhash')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>

<!-- {{{ QuickHashIntStringHash constants -->
  <section xml:id="quickhashintstringhash.constants">
   &reftitle.constants;
   <variablelist>

    <varlistentry xml:id="quickhashintstringhash.constants.check-for-dupes">
     <term><constant>QuickHashIntStringHash::CHECK_FOR_DUPES</constant></term>
     <listitem>
      <para>Si activé, ajouter des éléments dupliqués à un ensemble (via <methodname>QuickHashIntStringHash::add</methodname> ou
      <methodname>QuickHashIntStringHash::loadFromFile</methodname>) entraînera la suppression de ces éléments de l'ensemble.
      Cela prendra plus de temps, donc n'utilisez-le que si nécessaire.</para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="quickhashintstringhash.constants.do-not-use-zend-alloc">
     <term><constant>QuickHashIntStringHash::DO_NOT_USE_ZEND_ALLOC</constant></term>
     <listitem>
      <para>Désactive l'utilisation du gestionnaire de mémoire interne de PHP pour
      les structures de jeu internes. Avec cette option activée, les allocations internes ne compteront pas
      vers les paramètres <link linkend="ini.memory-limit">memory_limit</link>.</para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="quickhashintstringhash.constants.hasher-no-hash">
     <term><constant>QuickHashIntStringHash::HASHER_NO_HASH</constant></term>
     <listitem>
      <para>Sélectionne de ne pas utiliser de fonction de hachage, mais simplement
      utiliser un modulo pour trouver l'index de la liste de seaux. Cela n'est pas plus rapide que le hachage normal, et
      donne plus de collisions.</para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="quickhashintstringhash.constants.hasher-jenkins1">
     <term><constant>QuickHashIntStringHash::HASHER_JENKINS1</constant></term>
     <listitem>
      <para>Ceci est la fonction de hachage par défaut pour transformer les hachages entiers
      en index de liste de seaux.</para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="quickhashintstringhash.constants.hasher-jenkins2">
     <term><constant>QuickHashIntStringHash::HASHER_JENKINS2</constant></term>
     <listitem>
      <para>Sélectionne un algorithme de hachage de variantes.</para>
     </listitem>
    </varlistentry>

   </variablelist>
  </section>
<!-- }}} -->


 </partintro>

 &reference.quickhash.entities.quickhashintstringhash;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
