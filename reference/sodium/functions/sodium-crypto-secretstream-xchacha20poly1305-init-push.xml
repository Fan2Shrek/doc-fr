<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d76a7fe17dd2488e47d664a8ab38e161b13ac843 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.sodium-crypto-secretstream-xchacha20poly1305-init-push" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>sodium_crypto_secretstream_xchacha20poly1305_init_push</refname>
  <refpurpose>Initialise un contexte secretstream pour le chiffrement</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>sodium_crypto_secretstream_xchacha20poly1305_init_push</methodname>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>key</parameter></methodparam>
  </methodsynopsis>
  <para>
   Initialise un contexte secretstream pour le chiffrement.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>key</parameter></term>
    <listitem>
     <para>
      La clé de chiffrement. Voir <function>sodium_crypto_secretstream_xchacha20poly1305_keygen</function>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Un tableau avec deux valeurs de chaîne:
  </para>
  <simplelist>
   <member>L'état du secretstream, nécessaire pour les prochains appels</member>
   <member>L'en-tête du secretstream, qui doit être fourni au destinataire pour qu'il puisse extraire les données</member>
  </simplelist>
 </refsect1>

 <refsect1 role="examples"><!-- {{{ -->
  &reftitle.examples;
  <example xml:id="sodium-crypto-secretstream-xchacha20poly1305-init-push.example.basic"><!-- {{{ -->
   <title>Exemple de <function>sodium_crypto_secretstream_xchacha20poly1305_init_push</function></title>
   <programlisting role="php">
<![CDATA[
<?php
function encrypt_file(string $inputFilePath, string $outputFilePath, string $key): void
{
    [$state, $header] = sodium_crypto_secretstream_xchacha20poly1305_init_push($key);

    $inputFile = fopen($inputFilePath, 'rb');
    $outputFile = fopen($outputFilePath, 'wb');
    // Ecrit l'en-tête:
    fwrite($outputFile, $header);
    $inputFileSize = fstat($inputFile)['size'];

    // Encrypte le fichier et écrit son contenu dans le fichier de sortie:
    for ($i = 0; $i < $inputFileSize; $i += 8175) {
        $ptxt_chunk = fread($inputFile, 8175);
        $ctxt_chunk = sodium_crypto_secretstream_xchacha20poly1305_push($state, $ptxt_chunk);
        fwrite($outputFile, $ctxt_chunk);
    }

    sodium_memzero($state);
    fclose($inputFile);
    fclose($outputFile);
}

// sodium_crypto_secretstream_xchacha20poly1305_keygen()
$key = sodium_base642bin('MS0lzb7HC+thY6jY01pkTE/cwsQxnRq0/2L1eL4Hxn8=', SODIUM_BASE64_VARIANT_ORIGINAL);

file_put_contents('hello.txt', 'Hello world!');
encrypt_file('hello.txt', 'hello.txt.encrypted', $key);
var_dump(sodium_bin2hex(file_get_contents('hello.txt.encrypted')));
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
string(106) "971e33b255f0990ef3931caf761c59136efa77b434832f28ec719e3ff73f5aec38b3bba1574ab5b70a8844d8da36a668e802cfea2c"
]]>
   </screen>
  </example><!-- }}} -->
 </refsect1><!-- }}} -->

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
