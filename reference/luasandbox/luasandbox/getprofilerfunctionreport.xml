<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="luasandbox.getprofilerfunctionreport" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>LuaSandbox::getProfilerFunctionReport</refname>
  <refpurpose>Récupère les données du profileur</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>LuaSandbox::getProfilerFunctionReport</methodname>
   <methodparam choice="opt"><type>int</type><parameter>units</parameter><initializer>LuaSandbox::SECONDS</initializer></methodparam>
  </methodsynopsis>
  <para>
   Pour une instance de profilage précédemment démarrée par
   <methodname>LuaSandbox::enableProfiler</methodname>, récupère un
   rapport du coût de chaque fonction.
  </para>
  <para>
   La mesure du coût est déterminée par le paramètre
   <varname>$units</varname> :
  </para>
  <para>
   <variablelist>
    <varlistentry>
     <term><constant>LuaSandbox::SAMPLES</constant></term>
     <listitem><para>Mesure en nombre d'échantillons.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>LuaSandbox::SECONDS</constant></term>
     <listitem><para>Mesure en secondes de temps CPU.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>LuaSandbox::PERCENT</constant></term>
     <listitem><para>Mesure en pourcentage de temps CPU.</para></listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>units</parameter></term>
    <listitem>
     <para>
      L'unité de mesure constante.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Renvoie les mesures du profileur, triées par ordre décroissant, sous forme
   d'un tableau associatif. Les clés sont les noms des fonctions Lua (avec le fichier source et la ligne
   définis entre crochets angulaires), les valeurs sont les mesures en <type>int</type>
   ou <type>float</type>.
  </para>
  <note>
   <para>
    Sur Windows, cette fonction renvoie toujours zéro. Sur les systèmes
    d'exploitation qui ne prennent pas en charge <constant>CLOCK_THREAD_CPUTIME_ID</constant>,
    tels que FreeBSD et Mac OS X, cette fonction renverra le temps écoulé
    au mur, pas le temps CPU.
   </para>
  </note>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Profiling Lua code</title>
    <programlisting role="php">
<![CDATA[
<?php

// créer un nouveau LuaSandbox
$sandbox = new LuaSandbox();

// Démarre le profileur
$sandbox->enableProfiler( 0.01 );

// ... Exécutez du code Lua ici ...

// Récupère les données du profileur
$data = $sandbox->getProfilerFunctionReport();

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
