<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1ef9c7a76700b3e72844050d75e6ed1b870f9ca7 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="imagick.morphology" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Imagick::morphology</refname>
  <refpurpose>Applique un noyau personnalisé à l'image selon la méthode de morphologie donnée</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>Imagick::morphology</methodname>
   <methodparam><type>int</type><parameter>morphologyMethod</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam><type>ImagickKernel</type><parameter>ImagickKernel</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>channel</parameter><initializer>Imagick::CHANNEL_DEFAULT</initializer></methodparam>
  </methodsynopsis>
  <para>
   Applique un noyau personnalisé à l'image selon la méthode de morphologie donnée.

  </para>

 
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>morphologyMethod</parameter></term>
    <listitem>
     <para>
      Quelle méthode de morphologie utiliser parmi les constantes \Imagick::MORPHOLOGY_*.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>iterations</parameter></term>
    <listitem>
     <para>
      Le nombre d'itérations à appliquer à la fonction de morphologie. Une valeur de -1 signifie boucler jusqu'à ce qu'aucun changement ne soit trouvé. Comment cela est appliqué peut dépendre de la méthode de morphologie. Typiquement, il s'agit d'une valeur de 1.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>ImagickKernel</parameter></term>
    <listitem>
     <para>
      
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>channel</parameter></term>
    <listitem>
     <para>
      
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &imagick.return.success;
  </para>
 </refsect1>




 <refsect1 role="examples">
  &reftitle.examples;
  <para>
    <example>
      <title>Convultion <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $imagick = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_GAUSSIAN, "5,1");
        $imagick->morphology(\Imagick::MORPHOLOGY_CONVOLVE, 2, $kernel);
        header("Content-Type: image/png");
        echo $imagick->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Corréler <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php

        // Le pixel en haut à gauche doit être noir
        // Le pixel en bas à droite doit être blanc
        // Le reste n'a pas d'importance.
        

        $imagick = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromMatrix(self::$correlateMatrix, [2, 2]);
        $imagick->morphology(\Imagick::MORPHOLOGY_CORRELATE, 1, $kernel);
        header("Content-Type: image/png");
        echo $imagick->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Eroder <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_ERODE, 2, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Eroder l'intensité <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "1");
        $canvas->morphology(\Imagick::MORPHOLOGY_ERODE_INTENSITY, 2, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Dilater <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_DILATE, 4, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Dilater l'intensité <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "1");
        $canvas->morphology(\Imagick::MORPHOLOGY_DILATE_INTENSITY, 4, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Distancer avec le noyau de Chebyshev <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_CHEBYSHEV, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Distancer avec le noyau de Manhattan <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_MANHATTAN, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Distancer avec le noyau octagonal <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGONAL, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Distancer avec le noyau euclidien <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_EUCLIDEAN, "4");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Border <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_EDGE, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Ouvrir <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        // En conséquence, vous verrez que 'Ouvrir' a lissé le contour, en arrondissant les points saillants, et en supprimant les parties plus petites que la forme utilisée. Il déconnectera également ou 'ouvrira' les ponts minces.
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_OPEN, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Open intensity <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        // En conséquence, vous verrez que 'Ouvrir' a lissé le contour, en arrondissant les points saillants, et en supprimant les parties plus petites que la forme utilisée. Il déconnectera également ou 'ouvrira' les ponts minces.

        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_OPEN_INTENSITY, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Fermer <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        //L'utilisation de base de la méthode 'Fermer' est de réduire ou de supprimer les 'trous' ou les 'lacunes' d'environ la taille de l'élément de structure du noyau. C'est-à-dire 'fermer' les parties de l'arrière-plan qui sont d'environ cette taille.
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Fermer l'intensité <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        //L'utilisation de base de la méthode 'Fermer' est de réduire ou de supprimer les 'trous' ou les 'lacunes' d'environ la taille de l'élément de structure du noyau. C'est-à-dire 'fermer' les parties de l'arrière-plan qui sont d'environ cette taille.
        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE_INTENSITY, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Lisser <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_SMOOTH, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Border l'intérieur<function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_EDGE_IN, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Border l'extérieur <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_EDGE_OUT, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>La méthode 'TopHat', ou plus spécifiquement 'White Top Hat', renvoie les pixels qui ont été supprimés par une Ouverture de la forme, c'est-à-dire les pixels qui ont été supprimés pour arrondir les points, et les ponts de connexion entre les formes. <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_TOP_HAT, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>La méthode 'BottomHat', également connue sous le nom de 'Black TopHat', est les pixels qu'une Fermeture de la forme ajoute à l'image. C'est-à-dire les pixels qui ont été utilisés pour remplir les 'trous', les 'lacunes' et les 'ponts'. <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php

        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_BOTTOM_HAT, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Toucher et manquer <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        //Cela trouve tous les pixels avec 3 pixels de l'arête droite
        $matrix = [[1, false, false, 0]];
        $kernel = \ImagickKernel::fromMatrix(
            $matrix,
            [0, 0]
        );
        $canvas->morphology(\Imagick::MORPHOLOGY_HIT_AND_MISS, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Amincir <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $leftEdgeKernel = \ImagickKernel::fromMatrix([[0, 1]], [1, 0]);
        $rightEdgeKernel = \ImagickKernel::fromMatrix([[1, 0]], [0, 0]);
        $leftEdgeKernel->addKernel($rightEdgeKernel);
        
        $canvas->morphology(\Imagick::MORPHOLOGY_THINNING, 3, $leftEdgeKernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Épaissir <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $leftEdgeKernel = \ImagickKernel::fromMatrix([[0, 1]], [1, 0]);
        $rightEdgeKernel = \ImagickKernel::fromMatrix([[1, 0]], [0, 0]);
        $leftEdgeKernel->addKernel($rightEdgeKernel);

        $canvas->morphology(\Imagick::MORPHOLOGY_THICKEN, 3, $leftEdgeKernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Amincir pour générer une coque convexe <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $diamondKernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DIAMOND, "1");
        $convexKernel =  \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_CONVEX_HULL, "");

        // La morphologie d'amincissement ne gère pas les petits espaces. Nous les fermons
        // avec la morphologie de fermeture.
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);
        $canvas->morphology(\Imagick::MORPHOLOGY_THICKEN, -1, $convexKernel);
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);

        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>La morphologie itérative <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "2");        
        $canvas->morphology(\Imagick::MORPHOLOGY_ITERATIVE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();

?>
]]>
      </programlisting>
    </example>

    <example>
      <title>La fonction d'aide pour obtenir un contour d'image <function>Imagick::morphology</function></title> 
      <programlisting role="php">
<![CDATA[
<?php
function getCharacterOutline() {
    $imagick = new \Imagick(realpath("./images/character.png"));
    $character = new \Imagick();
    $character->newPseudoImage(
        $imagick->getImageWidth(),
        $imagick->getImageHeight(),
        "canvas:white"
    );
    $canvas = new \Imagick();
    $canvas->newPseudoImage(
        $imagick->getImageWidth(),
        $imagick->getImageHeight(),
        "canvas:black"
    );

    $character->compositeimage(
        $imagick,
        \Imagick::COMPOSITE_COPYOPACITY,
        0, 0
    );
    $canvas->compositeimage(
        $character,
        \Imagick::COMPOSITE_ATOP,
        0, 0
    );
    $canvas->setFormat('png');

    return $canvas;
}
?>
]]>
      </programlisting>
    </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
