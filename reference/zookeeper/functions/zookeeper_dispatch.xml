<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 62a954a6ff9d6d0fc815befe14413e5baba37c88 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.zookeeper-dispatch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>zookeeper_dispatch</refname>
  <refpurpose>Appelle les fonctions de rappels pour les opérations en attente</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>zookeeper_dispatch</methodname>
   <void/>
  </methodsynopsis>

  <para>
   La fonction <function>zookeeper_dispatch</function> appelle les fonctions de rappels passées par les opérations comme <methodname>Zookeeper::get</methodname> ou <methodname>Zookeeper::exists</methodname>.
  </para>

  <caution>
   <para>
    Depuis la version 0.4.0, cette fonction doit être appelée manuellement pour réaliser des opérations asynchrones. Si vous voulez que cela soit fait automatiquement, vous pouvez également déclarer des ticks au début de votre programme.
   </para>
  </caution>

  <para>
   Après PHP 7.1, vous pouvez ignorer cette fonction. Cette extension utilise EG(vm_interrupt) pour implémenter la répartition asynchrone.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Cette méthode émet une alerte PHP lorsque la fonction de rappel ne peut pas être invoqué.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="function.zookeeper-dispatch.example.1">
   <title>Exemple de <methodname>zookeeper_dispatch</methodname> #1</title>
   <para>
     Répartir manuellement les fonctions de rappels.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$client = new Zookeeper();
$client->connect('localhost:2181');
$client->get('/zookeeper', function() {
    echo "Callback was called".PHP_EOL;
});
while(true) {
    sleep(1);
    zookeeper_dispatch();
}
?>
]]>
   </programlisting>
  </example>

  <example xml:id="function.zookeeper-dispatch.example.2">
   <title>Exemple de <methodname>zookeeper_dispatch</methodname> #2</title>
   <para>
     Déclarer des ticks.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
declare(ticks=1);

$client = new Zookeeper();
$client->connect('localhost:2181');
$client->get('/zookeeper', function() {
    echo "Callback was called".PHP_EOL;
});
while(true) {
    sleep(1);
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Zookeeper::addAuth</methodname></member>
    <member><methodname>Zookeeper::connect</methodname></member>
    <member><methodname>Zookeeper::__construct</methodname></member>
    <member><methodname>Zookeeper::exists</methodname></member>
    <member><methodname>Zookeeper::get</methodname></member>
    <member><methodname>Zookeeper::getChildren</methodname></member>
    <member><methodname>Zookeeper::setWatcher</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
