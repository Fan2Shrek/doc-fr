<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 161dde4fe721309398dd324edbf02aec409f127b Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="migration81.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nouvelles Fonctionnalités</title>

 <sect2 xml:id="migration81.new-features.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration81.new-features.core.octal-literal-prefix">
   <title>Préfixe littéral octal entier</title>

   <para>
    Les entiers octaux peuvent maintenant utiliser un préfixe explicite
    <literal>0o</literal>/<literal>0O</literal>
    dans les littéraux d'entiers,
    de manière similaire aux littéraux d'entiers binaires et hexadécimaux.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
014;  // Littéral octal sans préfixe
0o14; // Littéral octal préfixé
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <!-- RFC: https://wiki.php.net/rfc/explicit_octal_notation -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.unpacking-string-keys">
   <title>La décompression de tableau avec des clés chaines de caractères</title>

   <para>
    Ajout du support pour <link linkend="language.types.array.unpacking">La décompression de tableau avec des clés chaines de caractères</link>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr1 = [1, 'a' => 'b'];
$arr2 = [...$arr1, 'c' => 'd']; //[1, 'a' => 'b', 'c' => 'd']
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <!-- RFC: https://wiki.php.net/rfc/array_unpacking_string_keys -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.named-arg-after-unpack">
   <title>Argument nommé apres une décompression d'argument</title>

   <para>
    Il est désormais possible de spécifier des arguments nommés après une décompression d'argument.
    <!-- TODO Add an example -->
    par exemple :
    foo(...$args, named: $arg).
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.upload-full-path-key">
   <title>Clé de chemin complet pour les téléchargements de fichiers</title>

   <para>
    Les téléchargements de fichiers fournissent désormais une clé <literal>full_path</literal> supplémentaire,
    qui contient le chemin complet (plutôt que juste le nom de base) du fichier téléchargé.
    Ceci est destiné à être utilisé en conjonction avec "upload webkitdirectory".
   </para>
   <!-- RFC: https://wiki.php.net/rfc/array_unpacking_string_keys -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.enums">
   <title>Enumerations</title>

   <para>
    Le support pour les <link linkend="language.enumerations">énumérations</link> a été ajouté.
    <!-- RFC: https://wiki.php.net/rfc/enumerations -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.fibers">
   <title>Fibers</title>

   <para>
    Le support pour les <link linkend="language.fibers">fibres</link> a été ajouté.
    <!-- RFC: https://wiki.php.net/rfc/fibers -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.callable-syntax">
   <title>Syntaxe de callable de première classe</title>

   <para>
    Les fermetures pour les callables peuvent maintenant être créées en utilisant <link linkend="functions.first_class_callable_syntax">la syntaxe <code>myFunc(...)</code></link>,
    qui est identique à <code>Closure::fromCallable('myFunc')</code>.
    <!-- RFC: https://wiki.php.net/rfc/first_class_callable_syntax -->
   </para>
   <note>
    <simpara>
     Le <code>...</code> fait partie de la syntaxe, et non une omission.
    </simpara>
   </note>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.intersection-types">
   <title>Intersection de types</title>

   <para>
    Le support pour les <link linkend="language.types.type-system.composite.intersection">intersection de types</link> a été ajouté.
    <!-- RFC: https://wiki.php.net/rfc/pure-intersection-types -->
   </para>
   <caution>
    <simpara>
     <link linkend="language.types.type-system.composite.intersection">
      Les types d'intersection</link> ne peuvent pas être utilisés avec
      <link linkend="language.types.declarations.composite.union">
      les types d'union</link>
    </simpara>
   </caution>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.never-type">
   <title>Le type never</title>

   <para>
    Un nouveau type de retour &never; a été ajouté.
    Cela indique qu'une fonction soit <function>exit</function>,
    lance une exception, ou ne se termine pas.
    <!-- RFC: https://wiki.php.net/rfc/noreturn_type -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.new-in-initializer">
   <title>&new; dans les initialiseurs</title>

   <para>
    Il est désormais possible d'utiliser des expressions <code>new ClassName()</code> comme 
    valeur par défaut d'un paramètre, d'une variable statique, d'initialisateurs de constantes globales,
    et comme arguments d'attribut.
    Les objets peuvent également être passés à <function>define</function> maintenant.
    <!-- TODO Add an example -->
   </para>
   <!-- RFC: https://wiki.php.net/rfc/new_in_initializers -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.readonly">
   <title>Les propriétés en lecture seule</title>

   <para>
    Le support pour la <link linkend="language.oop5.properties.readonly-properties">lecture seule</link> a été ajouté.
    <!-- RFC: https://wiki.php.net/rfc/readonly_properties_v2 -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.final-constants">
   <title>Les constantes de classe finales</title>

   <para>
    Ajout du support pour <link linkend="language.oop5.final.example.php81">le modificateur <modifier>final</modifier> pour les constantes de classes</link>.
    Aussi, les constantes d'interface deviennent surchargeables par défaut.
    <!-- RFC: https://wiki.php.net/rfc/final_class_const -->
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration81.new-features.curl">
  <title>CURL</title>

  <para>
   Ajout de l'option <constant>CURLOPT_DOH_URL</constant>.
  </para>

  <para>
   Ajout des options pour les certificats blob lorsque libcurl &gt;= 7.71.0:
  </para>
  <itemizedlist>
   <listitem>
    <simpara><constant>CURLOPT_ISSUERCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_ISSUERCERT</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_ISSUERCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_SSLCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_SSLKEY_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_SSLCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_SSLKEY_BLOB</constant></simpara>
   </listitem>
  </itemizedlist>

  <para>
   Ajout de <classname>CURLStringFile</classname>, qui peut être utilisé pour envoyer
    un fichier à partir d'une &string; plutôt qu'un fichier:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$file = new CURLStringFile($data, 'filename.txt', 'text/plain');
curl_setopt($curl, CURLOPT_POSTFIELDS, ['file' => $file]);
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.fpm">
  <title>FPM</title>

  <para>
   Ajout du format de statut openmetrics. Il peut être utilisé par Prometheus pour récupérer les 
   métriques FPM.
  </para>
  <para>
   Ajout d'une nouvelle option de pool pour le gestionnaire de processus dynamique appelée
   <literal>pm.max_spawn_rate</literal>. Elle permet de démarrer un nombre d'enfants
   à un rythme plus rapide lorsque le gestionnaire de processus dynamique est sélectionné.
   La valeur par défaut est <literal>32</literal> qui était la valeur précédente
   codée en dur.
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.gd">
  <title>GD</title>

  <para>
   Le support Avif est maintenant disponible via
   <function>imagecreatefromavif</function> et
   <function>imageavif</function>,
   si libgd a été compilé avec le support Avif.
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.hash">
  <title>Hash</title>

  <para>
   Les fonctions suivantes <function>hash</function>,
   <function>hash_file</function>, et <function>hash_init</function>
   supportent maintenant un nouveau argument optionel <parameter>options</parameter>, 
   qui peut être utilisé pour passer des données spécifiques à l'algorithme.
  </para>

  <sect3 xml:id="migration81.new-features.hash.murmurhash3">
   <title>MurmurHash3</title>

   <para>
    Ajout du support pour <literal>MurmurHash3</literal> avec support de streaming.
    Les variantes suivantes sont implémentées:
   </para>
   <itemizedlist>
    <listitem>
     <simpara>murmur3a, 32-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>murmur3c, 128-bit hash for x86</simpara>
    </listitem>
    <listitem>
     <simpara>murmur3f, 128-bit hash for x64</simpara>
    </listitem>
   </itemizedlist>

   <para>
    L'état de hachage initial peut être passé via la clé <literal>seed</literal>
    dans le tableau <parameter>options</parameter>, par exemple:
    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("murmur3f", $data, options: ["seed" => 42]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    Un valeur de graine valide est dans la plage de <literal>0</literal>
    à la <constant>UINT_MAX</constant> définie par la plateforme, généralement
    <literal>4294967295</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.hash.xxhash">
   <title>xxHash</title>

   <para>
    Ajout du support pour <literal>xxHash</literal>.
    Les variantes suivantes sont implémentées:
   </para>
   <itemizedlist>
    <listitem>
     <simpara>xxh32, 32-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>xxh64, 64-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>xxh3, 64-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>xxh128, 128-bit hash</simpara>
    </listitem>
   </itemizedlist>

   <para>
    L'état de hachage initial peut être passé via la clé <literal>seed</literal>
    dans le tableau <parameter>options</parameter>, par exemple:

    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("xxh3", $data, options: ["seed" => 42]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    L'usage secret est supporté en passant la clé <literal>secret</literal> 
    dans le tableau <parameter>options</parameter>, aussi :

    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("xxh3", $data, options: ["secret" => "at least 136 bytes long secret here"]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    La qualité du secret personnalisé est cruciale pour la qualité du hachage résultant.
    Il est fortement recommandé d'utiliser la meilleure entropie possible.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.new-features.mysqli">
  <title>MySQLi</title>

  <sect3 xml:id="migration81.new-features.mysqli.local_infile_directory">
   <title>Nouvelle directive INI<literal>mysqli.local_infile_directory</literal></title>

   <para>
    La directive INI <link linkend="ini.mysqli.local-infile-directory">mysqli.local_infile_directory</link>
    a été ajoutée, qui peut être utilisée pour spécifier un répertoire à partir duquel
    les fichiers sont autorisés à être chargés. Elle n'a de sens que si
    <link linkend="ini.mysqli.allow-local-infile">mysqli.allow_local_infile</link>
    n'est pas activé, car tous les répertoires sont autorisés dans ce cas.
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.mysqli.bind-in-execute">
   <title>Affecter des paramètres dans execute</title>

   <para>
    Il est désormais possible d'affecter des paramètres en les passant comme un tableau à
    <methodname>mysqli_stmt::execute</methodname>. Toutes les valeurs seront affectées en tant que
    chaînes de caractères. Seuls les tableaux de liste sont autorisés. Cette nouvelle fonctionnalité n'est pas disponible
    lorsque MySQLi est compilé avec libmysqlclient.
    <!-- RFC: https://wiki.php.net/rfc/mysqli_bind_in_execute -->
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$stmt = $mysqli->prepare('INSERT INTO users(id, name) VALUES(?,?)');
$stmt->execute([1, $username]);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.mysqli.mysqli_fetch_column">
   <title>Nouvelle méthode <methodname>mysqli_result::fetch_column</methodname></title>

   <para>
    <methodname>mysqli_result::fetch_column</methodname>
    a été ajouté pour permettre de récupérer une seule valeur scalaire du jeu de résultats.
    La nouvelle méthode accepte un paramètre de colonne facultatif <parameter>column</parameter> basé sur 0 
    de type &integer; spécifiant quelle colonne récupérer.
    <!-- RFC: https://wiki.php.net/rfc/mysqli_fetch_column -->
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$result = $mysqli->query('SELECT username FROM users WHERE id = 123');
echo $result->fetch_column();
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration81.new-features.pdo_mysql">
  <title>PDO</title>

  <para>
   L'attribut <constant>PDO::MYSQL_ATTR_LOCAL_INFILE_DIRECTORY</constant> a été ajouté,
   qui peut être utilisé pour spécifier un répertoire à partir duquel les fichiers
   sont autorisés à être chargés.
   Elle n'a de sens que si <constant>PDO::MYSQL_ATTR_LOCAL_INFILE</constant>
   n'est pas activé, car tous les répertoires sont autorisés dans ce cas.
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.pdo_sqlite">
  <title>PDO_SQLite</title>

  <para>
   La syntaxe DSN <literal>"file:"</literal> de SQLite est maintenant supportée,
   ce qui permet de spécifier des drapeaux supplémentaires.
   Cette fonctionnalité n'est pas disponible si open_basedir est défini.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
new PDO('sqlite:file:path/to/sqlite.db?mode=ro')
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.posix">
  <title>POSIX</title>

  <para>
   Ajout de <constant>POSIX_RLIMIT_KQUEUES</constant> et <constant>POSIX_RLIMIT_NPTS</constant>.
   Ces limites soft et hard ne sont disponibles que sur FreeBSD.
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.standard">
  <title>Standard</title>

  <para>
   <function>fputcsv</function> accepte désormais un nouveau argument
   <parameter>eol</parameter> qui permet de définir une séquence 
   de fin de ligne personnalisée, la valeur par défaut reste la même et est <literal>"\n"</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.spl">
  <title>SPL</title>

  <para>
   <methodname>SplFileObject::fputcsv</methodname> accepte désormais un nouveau argument
   <parameter>eol</parameter> qui permet de définir une séquence 
   de fin de ligne personnalisée, la valeur par défaut reste la même et est <literal>"\n"</literal>.
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
