<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 497c40ac164d5873fd87f622dfdeb5206392b446 Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="migration81.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Les changements de rétrocompatibilités</title>

 <sect2 xml:id="migration81.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration81.incompatible.core.globals-access">
   <title>Restrictions d'acceès $GLOBALS</title>

   <para>
    L'accès au tableau <varname>$GLOBALS</varname> est maintenant soumis à
    un certain nombre de restrictions.
    L'accès en lecture et en écriture aux éléments individuels du tableau tel que
    <code>$GLOBALS['var']</code> continue de fonctionner tel quel.
    L'accès en lecture seule à l'ensemble du tableau <varname>$GLOBALS</varname> continue
    également d'être supporté.
    Cependant, l'accès en écriture à l'ensemble du tableau <varname>$GLOBALS</varname>
    n'est plus supporté. Par exemple, <code>array_pop($GLOBALS)</code>
    générera une erreur.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.static-variable-inheritance">
   <title>
    L'utilisation de variables <modifier>static</modifier> dans les méthods héritées.
   </title>

   <para>
    Lorsqu'une méthode utilisant des variables <modifier>static</modifier> est héritée
    (mais non surchargée), la méthode héritée partagera désormais les variables.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function counter() {
        static $counter = 0;
        $counter++;
        return $counter;
    }
}
class B extends A {}
var_dump(A::counter()); // int(1)
var_dump(A::counter()); // int(2)
var_dump(B::counter()); // int(3), précédemment int(1)
var_dump(B::counter()); // int(4), précédemment int(2)
?>
]]>
     </programlisting>
    </informalexample>
    Cela signifie que les variables statiques dans les méthodes se comportent désormais
    de la même manière que les propriétés statiques.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.optional-before-required">
   <title>Les paramètres optionnels spécifié avant les paramètres requis</title>

   <para>
    Un <link linkend="functions.arguments.default">paramètre optionnel</link>
    spécifié avant les paramètres requis est maintenant toujours traité comme requis,
    même lorsqu'il est appelé en utilisant
    <link linkend="functions.named-arguments">les arguments nommés</link>.
    À partir de PHP 8.0.0, mais avant PHP 8.1.0, le code ci-dessous émet une note de dépréciation
    sur la définition, mais s'exécute avec succès lorsqu'il est appelé. À partir de PHP 8.1.0, une erreur
    de la classe <classname>ArgumentCountError</classname> est lancée, comme ce serait le cas lorsqu'il
    est appelé avec des arguments positionnels.

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function makeyogurt($container = "bowl", $flavour)
{
    return "Making a $container of $flavour yogurt.\n";
}
try
{
    echo makeyogurt(flavour: "raspberry");
}
catch (Error $e)
{
    echo get_class($e), ' - ', $e->getMessage(), "\n";
}
?>
]]>
     </programlisting>
     &example.outputs.80;
     <screen>
<![CDATA[
Deprecated: Required parameter $flavour follows optional parameter $container
 in example.php on line 3
Making a bowl of raspberry yogurt.
]]>
     </screen>
     &example.outputs.81;
     <screen>
<![CDATA[
Deprecated: Optional parameter $container declared before required parameter
 $flavour is implicitly treated as a required parameter in example.php on line 3
ArgumentCountError - makeyogurt(): Argument #1 ($container) not passed
]]>
     </screen>
    </informalexample>
   </para>
   <para>
    Notez qu'une valeur par défaut de &null; peut être utilisée avant les paramètres requis pour
    spécifier un <link linkend="language.types.declarations.nullable">type nullable</link>,
    mais le paramètre sera toujours requis.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.type-compatibility-internal">
   <title>La compatibilité des types de retour avec les classes internes</title>

   <para>
    La plupart des méthodes internes non finales nécessitent désormais que les méthodes de surcharge déclarent
    un type de retour compatible, sinon une note de dépréciation est émise lors de la validation de l'héritage.
    Dans le cas où le type de retour ne peut pas être déclaré pour une méthode de surcharge en raison de
    préoccupations de compatibilité inter-version de PHP,
    un attribut <classname>ReturnTypeWillChange</classname> peut être ajouté pour supprimer la note de dépréciation.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.new-keywords">
   <title>Nouveau mots-clés</title>
   <para>
    <literal>readonly</literal> est désormais un mot-clé. Cependant, il peut toujours être utilisé
    comme nom de fonction.
   </para>
   <para>
    <literal>never</literal> est désormais un mot réservé, donc il ne peut pas être utilisé pour nommer une classe,
    une interface ou un trait, et est également interdit d'être utilisé dans les namespaces.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.incompatible.resource2object">
  <title>Migration de ressource vers objet</title>

  <para>
   Plusieurs &resource;s ont été migrées vers des &object;s.
   Les vérifications de valeur de retour utilisant <function>is_resource</function> doivent être remplacées par des vérifications de &false;.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Les fonctions <link linkend="book.fileinfo">FileInfo</link> acceptent et retournent désormais
     des objets <classname>finfo</classname> au lieu
     de &resource;s <literal>fileinfo</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions <link linkend="book.ftp">FTP</link> acceptent et retournent désormais
     des objets <classname>FTP\Connection</classname> au lieu
     de &resource;s <literal>ftp</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions <link linkend="book.imap">IMAP</link> acceptent et retournent désormais
     des objets <classname>IMAP\Connection</classname> au lieu
     de &resource;s <literal>imap</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions <link linkend="book.ldap">LDAP</link> acceptent et retournent désormais
     des objets <classname>LDAP\Connection</classname> au lieu
     de &resource;s <literal>ldap</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions <link linkend="book.ldap">LDAP</link> acceptent et retournent désormais
     des objets <classname>LDAP\Result</classname> au lieu
     de &resource;s <literal>ldap result</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions <link linkend="book.ldap">LDAP</link> acceptent et retournent désormais
     des objets <classname>LDAP\ResultEntry</classname> au lieu
     de &resource;s <literal>ldap result entry</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions <link linkend="book.pgsql">PgSQL</link> acceptent et retournent désormais
     des objets <classname>PgSql\Connection</classname> au lieu
     de &resource;s <literal>pgsql link</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions <link linkend="book.pgsql">PgSQL</link> acceptent et retournent désormais
     des objets <classname>PgSql\Result</classname> au lieu
     de &resource;s <literal>pgsql result</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions <link linkend="book.pgsql">PgSQL</link> acceptent et retournent désormais
     des objets <classname>PgSql\Lob</classname> au lieu
     de &resource;s <literal>pgsql large object</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions <link linkend="book.pspell">PSpell</link> acceptent et retournent désormais
     des objets <classname>PSpell\Dictionary</classname> au lieu
     de &resource;s <literal>pspell</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions <link linkend="book.pspell">PSpell</link> acceptent et retournent désormais
     des objets <classname>PSpell\Config</classname> au lieu
     de &resource;s <literal>pspell config</literal>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration81.incompatible.mysqli">
  <title>MySQLi</title>

  <para>
   <function>mysqli_fetch_fields</function>, et
   <function>mysqli_fetch_field_direct</function> retourneront désormais
   <literal>0</literal> pour la <property>max_length</property>.
   Cette information peut être calculée en itérant sur le jeu de résultats,
    et en prenant la longueur maximale. C'est ce que PHP faisait
    précédemment en interne.
  </para>

  <para>
   L'option <constant>MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH</constant>
   n'a plus aucun effet.   
  </para>

  <para>
   L'option <constant>MYSQLI_STORE_RESULT_COPY_DATA</constant>
   n'a plus aucun effet. Passer une valeur au 
   paramètre <parameter>mode</parameter> de
   <methodname>mysqli::store_result</methodname> n'a plus aucun effet.
  </para>

  <para>
   <methodname>mysqli::connect</methodname> retourne maintenant &true; au lieu de &null; en cas de succès.
  </para>

  <para>
   Le mode de gestion des erreurs par défaut a été changé de "silencieux" à "exceptions".
   Voir la page <link linkend="mysqli-driver.report-mode">Mode de rapport MySQLi</link>
   pour plus de détails sur ce que cela implique,
   et comment définir explicitement cet attribut.
   Pour restaurer le comportement précédent, utilisez :
   <code>mysqli_report(MYSQLI_REPORT_OFF);</code>
  </para>

  <para>
   Les classes étendant <methodname>mysqli_stmt::execute</methodname>
   doivent désormais spécifier le paramètre optionnel supplémentaire.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.mysqlnd">
  <title>MySQLnd</title>

  <para>
   La directive INIT <link linkend="ini.mysqlnd.fetch_data_copy">mysqlnd.fetch_data_copy</link>
   a été enlèvée.
   Cela ne devrait pas entraîner de changements de comportement visibles pour l'utilisateur.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.openssl">
  <title>OpenSSL</title>

  <para>
   Les clés privées EC seront désormais exportées au format <acronym>PKCS</acronym>#8 plutôt
   que le format traditionnel, tout comme toutes les autres clés.
  </para>
  <para>
   <function>openssl_pkcs7_encrypt</function> et
   <function>openssl_cms_encrypt</function> utiliseront désormais par défaut
   AES-128-CBC plutôt que RC2-40. Le chiffrement RC2-40 est considéré
   comme non sécurisé et n'est pas activé par défaut par OpenSSL 3.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.pdo">
  <title>Les objets de données PHP</title>

  <para>
   <constant>PDO::ATTR_STRINGIFY_FETCHES</constant> tranforme désormais les valeurs
   de type &boolean; en <literal>"0"</literal> ou
   <literal>"1"</literal>. Précédemment, les &boolean; n'étaient pas transformés en chaînes.
  </para>
  <para>
   Appeller <methodname>PDOStatement::bindColumn</methodname> avec
   <constant>PDO::PARAM_LOB</constant> liera désormais constamment un stream
   de résultat lorsqu'<constant>PDO::ATTR_STRINGIFY_FETCHES</constant> n'est pas activé.
   Précédemment, le résultat était soit un stream, soit une chaîne en fonction du
   pilote de base de données utilisé et du moment où la liaison est effectuée.
  </para>

  <sect3 xml:id="migration81.incompatible.pdo.mysql">
   <title>Driver MySQL</title>

   <para>
    Les entiers et les flottants dans les ensembles de résultats seront désormais retournés en utilisant
    les types natifs PHP au lieu de &string;s lors de l'utilisation des déclarations préparées émulées.
    Cela correspond au comportement des déclarations préparées natives.
    Le comportement précédent peut être restauré en activant l'option
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.pdo.sqlite">
   <title>Driver SQLite</title>

   <para>
    Les entiers et les flottants dans les ensembles de résultats seront désormais retournés en utilisant
    les types PHP.
    Le comportement précédent peut être restauré en activant l'option
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.incompatible.phar">
  <title>Phar</title>

  <para>
   Pour se conformer à l'interface <interfacename>ArrayAccess</interfacename>,
   <methodname>Phar::offsetUnset</methodname> et
   <methodname>PharData::offsetUnset</methodname> ne retournent plus un &boolean;.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.standard">
  <title>Standard</title>

  <para>
   <function>version_compare</function> n'accepte plus les abréviations d'opérateurs non documentées.
  </para>

  <para>
   <function>htmlspecialchars</function>,
   <function>htmlentities</function>,
   <function>htmlspecialchars_decode</function>,
   <function>html_entity_decode</function>,
   et <function>get_html_translation_table</function>
   utilisent désormais <literal>ENT_QUOTES | ENT_SUBSTITUTE</literal> plutôt que
   <constant>ENT_COMPAT</constant> par défaut.
   Cela signifie que <literal>'</literal> est échappé en
   <literal>&amp;#039;</literal> alors qu'auparavant rien n'était fait.
   De plus, l'UTF-8 mal formé sera remplacé par un caractère de substitution Unicode,
   au lieu de résulter en une chaîne vide.
  </para>

  <para>
   <function>debug_zval_dump</function> affiche désormais le refcount des références
   avec leur refcount, au lieu de simplement préfixer
   <literal>&amp;</literal> à la valeur.
   Cela modélise plus précisément la représentation de référence depuis PHP 7.0.
  </para>

  <para>
   <function>debug_zval_dump</function> affiche désormais <literal>interned</literal>
   au lieu d'un refcount factice pour les chaînes internées et les tableaux immuables.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.spl">
  <title>Librairie Standard de PHP (Standard PHP Library ou SPL)</title>

  <para>
   <classname>SplFixedArray</classname>, sera désormais encodé en JSON comme un &array;.
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
