<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e1e0c52f12f7f01724d36b12cb0044ecb0c3f20d Maintainer: Fan2Shrek Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="migration83.other-changes" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Autres changements</title>

 <sect2 xml:id="migration83.other-changes.core">
  <title>Core changes</title>

  <sect3 xml:id="migration83.other-changes.core.ffi">
   <title>FFI</title>

   <para>
    <methodname>FFI::load</methodname> est désormais autorisé pendant le préchargement
    quand <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    est l'utilisateur système actuel. Précédemment,
    appeler <methodname>FFI::load</methodname> n'était pas possible
    pendant le préchargement si la directive
    <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    était définie.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.fpm">
   <title>FPM</title>

   <para>
    Les test FPM CLI échouent désormais si le chemin du socket est plus long que ce que l'OS supporte.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.opcache">
   <title>Opcache</title>

   <para>
    Dans les SAPI CLI et phpdbg, le préchargement ne nécessite plus
    que la directive <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    soit définie lorsque PHP est exécuté en tant que root.
    Dans les autres SAPI, cette directive est requise lorsque PHP est exécuté en tant que root
    car le préchargement est effectué avant que le SAPI ne passe à un utilisateur non privilégié.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.streams">
   <title>Streams</title>

   <para>
    Bloquer <function>fread</function> sur une connexion de socket retourne
    immédiatement s'il y a des données tamponnées au lieu d'attendre plus de données.
   </para>

   <para>
    Un stream de mémoire ne retourne plus d'erreur si le décalage de recherche est au-delà de la fin.
    A la place, la mémoire sera augmentée à la prochaine écriture et les données entre
    l'ancienne fin et le décalage sont remplies de zéros, similaire à la façon dont les fichiers fonctionnent.
   </para>

   <para>
    Les opérations d'accès <function>stat</function> comme
    <function>file_exists</function> et similaires utiliseront désormais le chemin réel
    au lieu du chemin du stream. Ceci est cohérent avec l'ouverture
    du stream.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.sapi">
  <title>Changement dans les modules SAPI</title>

  <sect3 xml:id="migration83.other-changes.sapi.cli">
   <title>CLI</title>

   <para>
    Les streams <constant>STDOUT</constant>, <constant>STDERR</constant> et
    <constant>STDIN</constant> ne sont plus fermés à la destruction de la ressource
    qui est principalement lorsque le CLI se termine.
    Il est cependant toujours possible de fermer explicitement ces streams en utilisant
    <function>fclose</function> et similaires.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.functions">
  <title>Fonctions changées</title>

  <sect3 xml:id="migration83.other-changes.functions.core">
   <title>Core</title>

   <para>
    <function>gc_status</function> a ajouté les 8 champs suivantes:

    <simplelist>
     <member><literal>"running"</literal> => bool</member>
     <member><literal>"protected"</literal> => bool</member>
     <member><literal>"full"</literal> => bool</member>
     <member><literal>"buffer_size"</literal> => int</member>
     <member><literal>"application_time"</literal> => float: Le temps total d'application,
     en secondes (y compris le temps de collecte)</member>
     <member><literal>"collector_time"</literal> => float: Le temps passé à collecter
     les cycles, en secondes (y compris le temps de destructeur et le temps de libération)</member>
     <member><literal>"destructor_time"</literal> => float: Le temps passé à exécuter
     les destructeurs pendant la collecte des cycles, en secondes</member>
     <member><literal>"free_time"</literal> => float: Le temps passé à libérer les valeurs
     pendant la collecte des cycles, en secondes</member>
    </simplelist>
   </para>

   <para>
    <function>class_alias</function> supporte désormais la création d'un alias sur
    les classes internes.
   </para>

   <para>
    Changer <link linkend="ini.open-basedir">open_basedir</link> à l'exécution
    en utilisant <code>ini_set('open_basedir', ...);</code> n'accepte plus les chemins
    contenant le répertoire parent (<literal>..</literal>). Précédemment,
    seuls les chemins commençant par <literal>..</literal> étaient interdits. Ceci
    pouvait facilement être contourné en préfixant le chemin par <literal>./</literal>.
   </para>

   <para>
    Les gestionnaires d'exceptions utilisateur attrapent désormais les exceptions pendant l'arrêt.
   </para>

   <para>
    Le HTML résultant de <function>highlight_string</function> et
    <function>highlight_file</function> a changé.
    Les espaces entre les balises HTML extérieures sont supprimés. Les sauts de ligne et les espaces
    ne sont plus convertis en entités HTML. Tout le HTML est maintenant enveloppé dans une balise
    <literal>&lt;pre&gt;</literal>. La balise <literal>&lt;span&gt;</literal> extérieure a été fusionnée
    avec la balise <literal>&lt;code&gt;</literal>.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.calendar">
   <title>Calendar</title>

   <para>
    <function>easter_date</function> supporte désormais les années de 1970 à
    2 000 000 000 sur les systèmes 64 bits, précédemment il ne supportait que
    les années de 1970 à 2037.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.curl">
   <title>Curl</title>

   <para>
    <function>curl_getinfo</function> supporte désormais deux nouvelles constantes :
    <constant>CURLINFO_CAPATH</constant> et
    <constant>CURLINFO_CAINFO</constant>. Si option est &null;, les deux clés
    suivant sont présentes :
    <literal>"capath"</literal> et <literal>"cainfo"</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.dom">
   <title>DOM</title>

   <para>
    Le type de retour de <methodname>DOMCharacterData::appendData</methodname> a été changé
    en <type>true</type>.
   </para>

   <para>
    <methodname>DOMDocument::loadHTML</methodname>,
    <methodname>DOMDocument::loadHTMLFile</methodname>, et
    <methodname>DOMDocument::loadXML</methodname> ont désormais un type de 
    retour provisoire de <type>bool</type>. Précédemment, cela était documenté
    comme ayant un type de retour de <code>DOMDocument|bool</code>, mais, à partir de PHP 8.0.0,
    <classname>DOMDocument</classname>
    ne peut pas être retourné car il n'est plus statiquement appelable.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.gd">
   <title>Gd</title>

   <para>
    La signature de <function>imagerotate</function> a changé.
    Le paramètre <parameter>$ignore_transparent</parameter> a été supprimé,
    car il était ignoré depuis PHP 5.5.0.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.intl">
   <title>Intl</title>

   <para>
    <function>datefmt_set_timezone</function> (et ses alias
    <methodname>IntlDateformatter::setTimeZone</methodname>)
    retourn désormais &true; en cas de succès, avant &null; étais retourné.
   </para>

   <para>
    <methodname>IntlBreakiterator::setText</methodname> retourne désormais &false;
    en cas d'échec, précédemment &null; était retourné.
    Il retourne désormais &true; en cas de succès, précédemment &null; était retourné.
   </para>

   <para>
    <methodname>IntlChar::enumCharNames</methodname> retourne désormais un booléen.
    Précédemment, il retournait &null; en cas de succès et &false; en cas d'échec.
   </para>

   <para>
    <methodname>IntlDateFormatter::__construct</methodname> lance une exception <constant>U_ILLEGAL_ARGUMENT_ERROR</constant>
    lorsqu'une locale invalide a été définie.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mbstring">
   <title>MBString</title>

   <para>
    <function>mb_strtolower</function> et <function>mb_convert_case</function>
    implémentent des règles de casse conditionnelles pour la lettre grecque sigma.
    Pour <function>mb_strtolower</function>,
    la casse conditionnelle s'applique uniquement aux modes <constant>MB_CASE_LOWER</constant>,
    et <constant>MB_CASE_TITLE</constant>, pas aux modes
    <constant>MB_CASE_LOWER_SIMPLE</constant> et
    <constant>MB_CASE_TITLE_SIMPLE</constant>.
   </para>

   <para>
    <function>mb_decode_mimeheader</function> interprète les tirets bas dans
    les mots encodés MIME QPrint comme requis par la RFC 2047 ; ils sont
    convertis en espaces.
    Les tirets bas doivent être encodés en <literal>"=5F"</literal> dans de tels mots
    encodés MIME.
   </para>

   <para>
    Dans de rare cas, <function>mb_encode_mimeheader</function> va encoder
    sa chaîne de caractères d'entrée là où elle la passerait en ASCII brut en PHP 8.2.
   </para>

   <para>
    <function>mb_encode_mimeheader</function> ne supprime plus les octets NUL
    (zéro) lors de l'encodage QPrint de la chaine d'entrée.
    Cela corrompait précédemment les chaines dans certains encodages de texte,
    en particulier UTF-16 et UTF-32, par mb_encode_mimeheader.
   </para>

   <para>
    <function>mb_detect_encoding</function> en mode "non-strict" se comporte
    désormais comme décrit dans la documentation.
    Auparavant, il retournait &false; si le même octet (par exemple, le premier
    octet) de la chaine d'entrée était invalide dans tous les encodages candidats.
    Plus généralement, il éliminait les encodages candidats de la considération
    lorsqu'un octet invalide était vu, et si le même octet d'entrée éliminait
    tous les encodages restants encore sous considération, il retournait &false;.
    D'autre part, si tous les encodages candidats sauf un étaient éliminés
    de la considération, il retournait le dernier restant sans tenir compte
    du nombre d'erreurs d'encodage qui pourraient être rencontrées plus tard dans la chaine.
    Ceci est différent du comportement décrit dans la documentation, qui
    dit : "Si strict est défini sur false, l'encodage le plus proche 
    sera retourné."
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mysqli">
   <title>mysqli</title>

   <para>
    <function>mysqli_fetch_object</function> lance désormais une
    <classname>ValueError</classname> au lieu d'une <classname>Exception</classname>
    lorsque l'argument <parameter>$constructor_args</parameter> n'est pas vide
    avec la classe n'ayant pas de constructeur.
   </para>

   <para>
    <function>mysqli_poll</function> lance désormais une <classname>ValueError</classname>
    lorsque ni l'argument <parameter>$read</parameter>
    ni l'argument <parameter>$error</parameter> ne sont passés.
   </para>

   <para>
    <function>mysqli_field_seek</function> et
    <methodname>mysqli_result::field_seek</methodname> précise désormais le type
    de retour comme <type>true</type> au lieu de <type>bool</type>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.odbc">
   <title>ODBC</title>

   <para>
    <function>odbc_autocommit</function> accepte désormais &null; pour le
    paramètre <parameter>$enable</parameter>.
    Passer &null; a le même comportement que passer un seul paramètre,
    indiquant si la fonctionnalité autocommit est activée ou non.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.pgsql">
   <title>PGSQL</title>

   <para>
    <function>pg_fetch_object</function> lance désormais une
    <classname>ValueError</classname> à la place d'une <classname>Exception</classname>
    lorsque l'argument<parameter>$constructor_args</parameter> n'est pas vide
    avec la classe n'ayant pas de constructeur.
   </para>

   <para>
    <function>pg_insert</function> lance désormais une <classname>ValueError</classname>
    au lieu d'une <classname>Exception</classname> lorsque la table spécifiée est invalide.
   </para>

   <para>
    <function>pg_insert</function> et <function>pg_convert</function> lancent
    une <classname>ValueError</classname> ou une <classname>TypeError</classname>
    à la place d'un <constant>E_WARNING</constant> lorsque la valeur/type d'un champ
    ne correspond pas correctement au type de PostgreSQL.
   </para>

   <para>
    Le paramètre <parameter>$row</parameter> de
    <function>pg_fetch_result</function>,
    <function>pg_field_prtlen</function>, et
    <function>pg_field_is_null</function> est désormais nullable.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.random">
   <title>Random</title>

   <para>
    Changement de <function>mt_srand</function> et <function>srand</function> pour
    ne pas vérifier le nombre d'arguments pour déterminer si une graine
    aléatoire doit être utilisée. Passer &null; générera une graine aléatoire, <literal>0</literal>
    utilisera zéro comme graine. Les fonctions sont désormais cohérentes avec
    <methodname>Random\Engine\Mt19937::__construct</methodname>.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.reflection">
   <title>Reflection</title>

   <para>
    Le type de retour de <methodname>ReflectionClass::getStaticProperties</methodname>
    n'est désormais plus nullable.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.standard">
   <title>Standard</title>

   <para>
    Le <constant>E_NOTICE</constant> émis par <function>unserialize</function>
    a été promu en <constant>E_WARNING</constant>.
    <!-- RFC: https://wiki.php.net/rfc/improve_unserialize_error_handling -->
   </para>

   <para>
    <function>unserialize</function> émet désormais un <constant>E_WARNING</constant>
    si l'entrée contient des octets non consommés.
    <!-- RFC: https://wiki.php.net/rfc/unserialize_warn_on_trailing_data -->
   </para>

   <para>
    <function>array_pad</function> n'est désormais limité que par le nombre maximum
    d'éléments qu'un tableau peut contenir. Auparavant, il était seulement possible
    d'ajouter au plus 1 048 576 éléments à la fois.
   </para>

   <para>
    <function>strtok</function> lance maintenant un <constant>E_WARNING</constant> si le
    token n'est pas fourni lors du démarrage de la tokenisation.
   </para>

   <para>
    <function>password_hash</function> chaîne désormais l'exception sous-jacente
    <classname>Random\RandomException</classname>
    dans la <parameter>$previous</parameter> <classname>Exception</classname>
    de <constant>ValueError</constant> lorsque la génération de sel échoue.
   </para>

   <para>
    Si un tableau est utilisé comme <parameter>$command</parameter> pour
    <function>proc_open</function>, il doit désormais avoir au moins un élément
    non vide. Sinon, une <classname>ValueError</classname>
    est lancée.
   </para>

   <para>
    <function>proc_open</function> retourne désormais &false; si le tableau <parameter>$command</parameter>
    est une commande invalide au lieu d'un objet de ressource qui produit un avertissement plus tard.
    C'était déjà le cas pour Windows, mais c'est maintenant aussi le cas si une implémentation posix_spawn
    est utilisée (la plupart des plates-formes Linux, BSD et MacOS). Il reste
    quelques anciennes plates-formes où ce comportement n'a pas changé car posix_spawn n'est pas
    pris en charge là-bas. 
   </para>

   <para>
    <function>array_sum</function> et <function>array_product</function> émettent désormais
    un avertissement lorsque les valeurs du tableau ne peuvent pas être converties en int/float.
    Auparavant, les tableaux et les objets étaient ignorés tandis que chaque autre valeur était
    convertie en int. De plus, les objets qui définissent une conversion numérique (par exemple
    <link linkend="book.gmp">GMP</link>) sont désormais convertis au lieu d'être ignorés.
    <!-- RFC: https://wiki.php.net/rfc/saner-array-sum-product -->
   </para>

   <para>
    Le <parameter>$decimals</parameter> de <function>number_format</function>
    gère désormais les entiers négatifs.
    Arrondir avec une valeur négative pour <parameter>$decimals</parameter> signifie
    que <parameter>$num</parameter> est arrondi à <parameter>$decimals</parameter>
    chiffres significatifs avant le séparateur décimal.
    Auparavant, les entiers négatifs pour <parameter>$decimals</parameter> étaient
    silencieusement ignorés et le nombre était arrondi à zéro décimales.
   </para>

   <para>
    Un nouveau argument <parameter>$before_needle</parameter> a été ajouté à
    <function>strrchr</function>. Il se comporte comme son homologue dans les
    fonctions <function>strstr</function> ou <function>stristr</function>.
   </para>

   <para>
    <function>str_getcsv</function> et <function>fgetcsv</function> retournent désormais
    une chaine vide au lieu d'une chaine avec un seul octet nul pour le dernier champ
    qui ne contient qu'une enceinte non terminée.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration83.other-changes.extensions">
  <title>Autres changements aux extensions</title>

  <sect3 xml:id="migration83.other-changes.extensions.core">
   <title>Core</title>

   <para>
    Utiliser les opérateurs d'<link linkend="language.operators.increment">incrémentation/décrémentation</link>
    (<literal>++</literal>/<literal>--</literal>) sur des valeurs de type
    <type>bool</type> émet désormais des avertissements.
    Cela est dû au fait que cela n'a actuellement aucun effet, mais se comportera comme
    <code>$bool += 1</code> à l'avenir.
    Using the <link linkend="language.operators.increment">increment/decrement</link>
   </para>

   <para>
    Utiliser l'opérateur de <link linkend="language.operators.increment">décrémentation</link>
    (<literal>--</literal>) sur des valeurs de type <type>null</type> émet désormais des avertissements.
    Cela est dû au fait que cela n'a actuellement aucun effet, mais se comportera comme
    <code>$null -= 1</code> à l'avenir.
   </para>

   <para>
    Les objets internes qui implémentent un cast _IS_NUMBER mais pas un gestionnaire do_operator
    qui remplace l'addition et la soustraction peuvent désormais être incrémentés et décrémentés
    comme si on faisait <code>$o += 1</code> ou <code>$o -= 1</code>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.dom">
   <title>DOM</title>

   <para>
    Le mécanisme de durée de vie du DOM a été retravaillé de telle sorte que les nœuds
    implicitement supprimés peuvent toujours être récupérés. Auparavant, cela entraînait une exception.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.sqlite3">
   <title>SQLite3</title>

   <para>
    La classe <classname>SQLite3</classname> lance une
    <classname>SQLite3Exception</classname> (extension de
    <classname>Exception</classname>) à la place de <classname>Exception</classname>.
   </para>

   <para>
    Le code d'erreur SQLite est désormais passé dans le code d'erreur de l'exception
    au lieu d'être inclus dans le message d'erreur.
   </para>

  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.ini">
  <title>Changement de la gestion du fichier INI</title>

  <itemizedlist>
   <listitem>
    <para>
     Les paramètres INI <literal>assert.*</literal> ont été dépréciés.
     Cela comprend les paramètres INI suivants :
     <simplelist>
      <member><link linkend="ini.assert.active">assert.active</link></member>
      <member><link linkend="ini.assert.bail">assert.bail</link></member>
      <member><link linkend="ini.assert.callback">assert.callback</link></member>
      <member><link linkend="ini.assert.exception">assert.exception</link></member>
      <member><link linkend="ini.assert.warning">assert.warning</link></member>
     </simplelist>
     Si la valeur du paramètre est égale à la valeur par défaut, aucun avertissement de dépréciation
     n'est émis.
     Le paramètre INI <link linkend="ini.zend.assertions">zend.assertions</link>
     devrait être utilisé à la place.
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.max_allowed_stack_size">-->zend.max_allowed_stack_size<!--</link>-->
     est une nouvelle directive INI pour définir la taille maximale de la pile autorisée.
     Les valeurs possibles sont <literal>0</literal> (détecter la taille maximale de la pile du processus ou du thread),
     <literal>-1</literal> (pas de limite), ou un nombre positif d'octets.
     La valeur par défaut est <literal>0</literal>.
     Lorsqu'il n'est pas possible de détecter la taille maximale de la pile du processus ou du thread,
     une valeur par défaut système connue est utilisée.
     Définir cette valeur trop élevée a le même effet que la désactivation de la limite de taille de la pile.
     Les fibres utilisent 
     <!-- link TODO -->fiber.stack_size<!-- /link -->
     comme taille de pile maximale autorisée.
     Une <classname>Error</classname> est lancée lorsque la pile d'appel du processus dépasse
     <!-- link TODO -->zend.max_allowed_stack_size-zend.reserved_stack_size<!-- /link-->
     octets, pour éviter les erreurs de segmentation dues à un dépassement de pile,
     dans le but de faciliter le débogage.
     La taille de la pile augmente pendant les récursions non contrôlées impliquant des fonctions internes
     ou les méthodes magiques
     <link linkend="object.tostring">__toString()</link>,
     <link linkend="object.clone">__clone()</link>,
     <link linkend="object.sleep">__sleep()</link>,
     <link linkend="object.destruct">__destruct()</link>.
     Cela n'est pas lié aux débordements de tampon de pile, et n'est pas une fonctionnalité de sécurité.
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.reserved_stack_size">-->zend.reserved_stack_size<!--</link>-->
     est une nouvelle directive INI pour définir la taille de la pile réservée, en octets.
     Cela est soustrait de la taille maximale de la pile
     autorisée, en tant que tampon, lors de la vérification de la taille de la pile.
    </para>
   </listitem>
   </itemizedlist>
 </sect2>

 <sect2 xml:id="migration83.other-changes.performance">
  <title>Performance</title>

  <sect3 xml:id="migration83.other-changes.performance.dom">
   <title>DOM</title>

   <para>
    Itérer sur un <classname>DOMNodeList</classname> utilise désormais un cache. Par conséquent,
    demander des éléments ne prend plus de temps quadratique par défaut.
   </para>

   <para>
    Obtenir le contenu textuel des nœuds évite désormais une allocation, ce qui entraîne
    un gain de performance.
   </para>

   <para>
    <methodname>DOMChildNode::remove</methodname> s'exécute désormais en O(1) performance.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.standard">
   <title>Standard</title>

   <para>
    Le drapeau <function>file</function> pour la vérification des erreurs est désormais environ 7% plus rapide.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.spl">
   <title>SPL</title>

   <para>
    <classname>RecursiveDirectoryIterator</classname> effectue désormais moins d'E/S
    lors du parcours d'un répertoire.
   </para>
  </sect3>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
